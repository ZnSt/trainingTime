{"ast":null,"code":"var _jsxFileName = \"/Users/privetsvuemlord/Documents/react/trainingTime/src/components/App.jsx\";\nimport { Component } from \"react\";\nimport shortid from \"shortid\";\nimport contacts from \"../json/contacts.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      contacts,\n      name: \"\",\n      number: \"\"\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.reset();\n      console.log(this.state);\n    };\n\n    this.reset = () => {\n      this.setState({\n        name: \"\",\n        number: \"\"\n      });\n    };\n\n    this.handleChange = event => {\n      const {\n        name,\n        value\n      } = event.currentTarget;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.addNewContact = newName => {\n      const newContact = {\n        id: shortid.generate(),\n        newName\n      };\n      this.setState(prevState => ({\n        contacts: [newContact, ...prevState.contacts]\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Name\",\n          value: this.state.name,\n          onChange: this.handleChange,\n          name: \"name\",\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"tel\",\n          placeholder: \"Number\",\n          value: this.state.number,\n          onChange: this.handleChange,\n          name: \"number\",\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.addNewContact(this.state.name),\n          children: \"Add Contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: contacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: contact.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)\n        }, contact.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/Users/privetsvuemlord/Documents/react/trainingTime/src/components/App.jsx"],"names":["Component","shortid","contacts","App","state","name","number","handleSubmit","event","preventDefault","reset","console","log","setState","handleChange","value","currentTarget","addNewContact","newName","newContact","id","generate","prevState","render","map","contact"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;;AAEA,OAAO,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACjCI,KADiC,GACzB;AACNF,MAAAA,QADM;AAENG,MAAAA,IAAI,EAAE,EAFA;AAGNC,MAAAA,MAAM,EAAE;AAHF,KADyB;;AAAA,SAOjCC,YAPiC,GAOjBC,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKC,KAAL;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAjB;AACD,KAXgC;;AAAA,SAajCM,KAbiC,GAazB,MAAM;AACZ,WAAKG,QAAL,CAAc;AAAER,QAAAA,IAAI,EAAE,EAAR;AAAYC,QAAAA,MAAM,EAAE;AAApB,OAAd;AACD,KAfgC;;AAAA,SAiBjCQ,YAjBiC,GAiBjBN,KAAD,IAAW;AACxB,YAAM;AAAEH,QAAAA,IAAF;AAAQU,QAAAA;AAAR,UAAkBP,KAAK,CAACQ,aAA9B;AACA,WAAKH,QAAL,CAAc;AACZ,SAACR,IAAD,GAAQU;AADI,OAAd;AAGD,KAtBgC;;AAAA,SAwBjCE,aAxBiC,GAwBhBC,OAAD,IAAa;AAC3B,YAAMC,UAAU,GAAG;AACjBC,QAAAA,EAAE,EAAEnB,OAAO,CAACoB,QAAR,EADa;AAEjBH,QAAAA;AAFiB,OAAnB;AAKA,WAAKL,QAAL,CAAeS,SAAD,KAAgB;AAC5BpB,QAAAA,QAAQ,EAAE,CAACiB,UAAD,EAAa,GAAGG,SAAS,CAACpB,QAA1B;AADkB,OAAhB,CAAd;AAGD,KAjCgC;AAAA;;AAkCjCqB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAM,QAAA,QAAQ,EAAE,KAAKhB,YAArB;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,WAAW,EAAC,MAFd;AAGE,UAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,IAHpB;AAIE,UAAA,QAAQ,EAAE,KAAKS,YAJjB;AAKE,UAAA,IAAI,EAAC,MALP;AAME,UAAA,OAAO,EAAC,wHANV;AAOE,UAAA,KAAK,EAAC,wIAPR;AAQE,UAAA,QAAQ;AARV;AAAA;AAAA;AAAA;AAAA,gBADF,eAYE;AACE,UAAA,IAAI,EAAC,KADP;AAEE,UAAA,WAAW,EAAC,QAFd;AAGE,UAAA,KAAK,EAAE,KAAKV,KAAL,CAAWE,MAHpB;AAIE,UAAA,QAAQ,EAAE,KAAKQ,YAJjB;AAKE,UAAA,IAAI,EAAC,QALP;AAME,UAAA,OAAO,EAAC,wFANV;AAOE,UAAA,KAAK,EAAC,8FAPR;AAQE,UAAA,QAAQ;AARV;AAAA;AAAA;AAAA;AAAA,gBAZF,eAuBE;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKG,aAAL,CAAmB,KAAKb,KAAL,CAAWC,IAA9B,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3BF,eA4BE;AAAA,kBACGH,QAAQ,CAACsB,GAAT,CAAcC,OAAD,iBACZ;AAAA,iCACE;AAAA,sBAAIA,OAAO,CAACpB;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF,WAASoB,OAAO,CAACL,EAAjB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cA5BF;AAAA,oBADF;AAsCD;;AAzEgC","sourcesContent":["import { Component } from \"react\";\nimport shortid from \"shortid\";\nimport contacts from \"../json/contacts.json\";\n\nexport class App extends Component {\n  state = {\n    contacts,\n    name: \"\",\n    number: \"\",\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.reset();\n    console.log(this.state);\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  addNewContact = (newName) => {\n    const newContact = {\n      id: shortid.generate(),\n      newName,\n    };\n\n    this.setState((prevState) => ({\n      contacts: [newContact, ...prevState.contacts],\n    }));\n  };\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n\n          <input\n            type=\"tel\"\n            placeholder=\"Number\"\n            value={this.state.number}\n            onChange={this.handleChange}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n\n          <button onClick={() => this.addNewContact(this.state.name)}>Add Contact</button>\n        </form>\n\n        <h2>Contacts</h2>\n        <ul>\n          {contacts.map((contact) => (\n            <li key={contact.id}>\n              <p>{contact.name}</p>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}