{"ast":null,"code":"import useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport React, { useRef, useEffect, cloneElement } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useTransition(_ref) {\n  let {\n    in: inProp,\n    onTransition,\n    initial = true\n  } = _ref;\n  const ref = useRef(null);\n  const isInitialRef = useRef(true);\n  const handleTransition = useEventCallback(onTransition);\n  useEffect(() => {\n    if (isInitialRef.current && !initial) {\n      return;\n    }\n\n    handleTransition({\n      in: inProp,\n      element: ref.current,\n      initial: isInitialRef.current\n    });\n  }, [inProp, initial, handleTransition]);\n  useEffect(() => {\n    isInitialRef.current = false;\n    return () => {\n      isInitialRef.current = true;\n    };\n  }, []);\n  return ref;\n}\n/**\n * Adapts an imperative transition function to a subset of the RTG `<Transition>` component API.\n */\n\nexport default function ImperativeTransition(_ref2) {\n  let {\n    children,\n    in: inProp,\n    appear,\n    onExited,\n    onEntered,\n    transition\n  } = _ref2;\n  const ref = useTransition({\n    in: !!inProp,\n    initial: appear,\n    onTransition: options => {\n      const onFinish = () => {\n        if (options.in) onEntered == null ? void 0 : onEntered(options.element, options.initial);else onExited == null ? void 0 : onExited(options.element);\n      };\n\n      Promise.resolve(transition(options)).then(onFinish);\n    }\n  });\n  const combinedRef = useMergedRefs(ref, children.ref);\n  return /*#__PURE__*/cloneElement(children, {\n    ref: combinedRef\n  });\n}\nexport function renderTransition(Component, runTransition, props) {\n  if (Component) {\n    return /*#__PURE__*/_jsx(Component, Object.assign({}, props));\n  }\n\n  if (runTransition) {\n    return /*#__PURE__*/_jsx(ImperativeTransition, Object.assign({}, props, {\n      transition: runTransition\n    }));\n  }\n\n  return props.children;\n}","map":{"version":3,"sources":["/Users/privetsvuemlord/Documents/react/trainingTime/node_modules/@restart/ui/esm/ImperativeTransition.js"],"names":["useMergedRefs","useEventCallback","React","useRef","useEffect","cloneElement","jsx","_jsx","useTransition","in","inProp","onTransition","initial","ref","isInitialRef","handleTransition","current","element","ImperativeTransition","children","appear","onExited","onEntered","transition","options","onFinish","Promise","resolve","then","combinedRef","renderTransition","Component","runTransition","props","Object","assign"],"mappings":"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","sourcesContent":["import useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport React, { useRef, useEffect, cloneElement } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useTransition({\n  in: inProp,\n  onTransition,\n  initial = true\n}) {\n  const ref = useRef(null);\n  const isInitialRef = useRef(true);\n  const handleTransition = useEventCallback(onTransition);\n  useEffect(() => {\n    if (isInitialRef.current && !initial) {\n      return;\n    }\n    handleTransition({\n      in: inProp,\n      element: ref.current,\n      initial: isInitialRef.current\n    });\n  }, [inProp, initial, handleTransition]);\n  useEffect(() => {\n    isInitialRef.current = false;\n    return () => {\n      isInitialRef.current = true;\n    };\n  }, []);\n  return ref;\n}\n/**\n * Adapts an imperative transition function to a subset of the RTG `<Transition>` component API.\n */\nexport default function ImperativeTransition({\n  children,\n  in: inProp,\n  appear,\n  onExited,\n  onEntered,\n  transition\n}) {\n  const ref = useTransition({\n    in: !!inProp,\n    initial: appear,\n    onTransition: options => {\n      const onFinish = () => {\n        if (options.in) onEntered == null ? void 0 : onEntered(options.element, options.initial);else onExited == null ? void 0 : onExited(options.element);\n      };\n      Promise.resolve(transition(options)).then(onFinish);\n    }\n  });\n  const combinedRef = useMergedRefs(ref, children.ref);\n  return /*#__PURE__*/cloneElement(children, {\n    ref: combinedRef\n  });\n}\nexport function renderTransition(Component, runTransition, props) {\n  if (Component) {\n    return /*#__PURE__*/_jsx(Component, Object.assign({}, props));\n  }\n  if (runTransition) {\n    return /*#__PURE__*/_jsx(ImperativeTransition, Object.assign({}, props, {\n      transition: runTransition\n    }));\n  }\n  return props.children;\n}"]},"metadata":{},"sourceType":"module"}