{"ast":null,"code":"var _jsxFileName = \"/Users/privetsvuemlord/Documents/react/trainingTime/src/components/App.jsx\";\nimport { Component } from \"react\";\nimport shortid from \"shortid\";\nimport contacts from \"../json/contacts.json\";\nimport { FormContacts } from \"./FormContacts\";\nimport { ContactsList } from \"./ContactsList\";\nimport { Filter } from \"./Filter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      contacts,\n      filter: \"\"\n    };\n\n    this.addNewContact = (newName, newNumber) => {\n      const newContact = {\n        id: shortid.generate(),\n        name: newName,\n        number: newNumber\n      };\n      this.setState(_ref => {\n        let {\n          contacts\n        } = _ref;\n        return {\n          contacts: [newContact, ...contacts]\n        };\n      });\n    };\n\n    this.deleteContact = id => {\n      this.setState(prevState => ({\n        contacts: prevState.contacts.filter(contact => contact.id !== id)\n      }));\n    };\n\n    this.changeFilter = event => {\n      this.setState({\n        filter: event.currentTarget.value\n      });\n    };\n\n    this.getVisibleContacts = () => {\n      const {\n        contacts,\n        filter\n      } = this.state;\n      return contacts.filter(contact => contact.name.toLowerCase().includes(filter));\n    };\n\n    this.repeatContact = nameId => {\n      this.state.contacts.filter(contact => {\n        if (contact.name.includes(nameId)) {\n          alert(`${nameId} is already been`);\n        }\n\n        return false;\n      });\n    };\n  }\n\n  render() {\n    const {\n      filter\n    } = this.state;\n    const filteredName = this.getVisibleContacts();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FormContacts, {\n        onSubmit: this.addNewContact,\n        repeat: this.repeatContact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Filter, {\n        onFilter: this.changeFilter,\n        value: filter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactsList, {\n        value: filteredName,\n        onDelete: this.deleteContact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/Users/privetsvuemlord/Documents/react/trainingTime/src/components/App.jsx"],"names":["Component","shortid","contacts","FormContacts","ContactsList","Filter","App","state","filter","addNewContact","newName","newNumber","newContact","id","generate","name","number","setState","deleteContact","prevState","contact","changeFilter","event","currentTarget","value","getVisibleContacts","toLowerCase","includes","repeatContact","nameId","alert","render","filteredName"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,MAAT,QAAuB,UAAvB;;;AAEA,OAAO,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACjCO,KADiC,GACzB;AACNL,MAAAA,QADM;AAENM,MAAAA,MAAM,EAAE;AAFF,KADyB;;AAAA,SAMjCC,aANiC,GAMjB,CAACC,OAAD,EAAUC,SAAV,KAAwB;AACtC,YAAMC,UAAU,GAAG;AACjBC,QAAAA,EAAE,EAAEZ,OAAO,CAACa,QAAR,EADa;AAEjBC,QAAAA,IAAI,EAAEL,OAFW;AAGjBM,QAAAA,MAAM,EAAEL;AAHS,OAAnB;AAMA,WAAKM,QAAL,CAAc;AAAA,YAAC;AAAEf,UAAAA;AAAF,SAAD;AAAA,eAAmB;AAC/BA,UAAAA,QAAQ,EAAE,CAACU,UAAD,EAAa,GAAGV,QAAhB;AADqB,SAAnB;AAAA,OAAd;AAGD,KAhBgC;;AAAA,SAkBjCgB,aAlBiC,GAkBhBL,EAAD,IAAQ;AACtB,WAAKI,QAAL,CAAeE,SAAD,KAAgB;AAC5BjB,QAAAA,QAAQ,EAAEiB,SAAS,CAACjB,QAAV,CAAmBM,MAAnB,CAA2BY,OAAD,IAAaA,OAAO,CAACP,EAAR,KAAeA,EAAtD;AADkB,OAAhB,CAAd;AAGD,KAtBgC;;AAAA,SAwBjCQ,YAxBiC,GAwBjBC,KAAD,IAAW;AACxB,WAAKL,QAAL,CAAc;AAAET,QAAAA,MAAM,EAAEc,KAAK,CAACC,aAAN,CAAoBC;AAA9B,OAAd;AACD,KA1BgC;;AAAA,SA4BjCC,kBA5BiC,GA4BZ,MAAM;AACzB,YAAM;AAAEvB,QAAAA,QAAF;AAAYM,QAAAA;AAAZ,UAAuB,KAAKD,KAAlC;AACA,aAAOL,QAAQ,CAACM,MAAT,CAAiBY,OAAD,IAAaA,OAAO,CAACL,IAAR,CAAaW,WAAb,GAA2BC,QAA3B,CAAoCnB,MAApC,CAA7B,CAAP;AACD,KA/BgC;;AAAA,SAiCjCoB,aAjCiC,GAiChBC,MAAD,IAAY;AAC1B,WAAKtB,KAAL,CAAWL,QAAX,CAAoBM,MAApB,CAA4BY,OAAD,IAAa;AACtC,YAAIA,OAAO,CAACL,IAAR,CAAaY,QAAb,CAAsBE,MAAtB,CAAJ,EAAmC;AACjCC,UAAAA,KAAK,CAAE,GAAED,MAAO,kBAAX,CAAL;AACD;;AACD,eAAO,KAAP;AACD,OALD;AAMD,KAxCgC;AAAA;;AA0CjCE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEvB,MAAAA;AAAF,QAAa,KAAKD,KAAxB;AACA,UAAMyB,YAAY,GAAG,KAAKP,kBAAL,EAArB;AAEA,wBACE;AAAA,8BACE,QAAC,YAAD;AAAc,QAAA,QAAQ,EAAE,KAAKhB,aAA7B;AAA4C,QAAA,MAAM,EAAE,KAAKmB;AAAzD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE,KAAKP,YAAvB;AAAqC,QAAA,KAAK,EAAEb;AAA5C;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE,QAAC,YAAD;AAAc,QAAA,KAAK,EAAEwB,YAArB;AAAmC,QAAA,QAAQ,EAAE,KAAKd;AAAlD;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBADF;AAQD;;AAtDgC","sourcesContent":["import { Component } from \"react\";\nimport shortid from \"shortid\";\nimport contacts from \"../json/contacts.json\";\n\nimport { FormContacts } from \"./FormContacts\";\nimport { ContactsList } from \"./ContactsList\";\nimport { Filter } from \"./Filter\";\n\nexport class App extends Component {\n  state = {\n    contacts,\n    filter: \"\",\n  };\n\n  addNewContact = (newName, newNumber) => {\n    const newContact = {\n      id: shortid.generate(),\n      name: newName,\n      number: newNumber,\n    };\n\n    this.setState(({ contacts }) => ({\n      contacts: [newContact, ...contacts],\n    }));\n  };\n\n  deleteContact = (id) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((contact) => contact.id !== id),\n    }));\n  };\n\n  changeFilter = (event) => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) => contact.name.toLowerCase().includes(filter));\n  };\n\n  repeatContact = (nameId) => {\n    this.state.contacts.filter((contact) => {\n      if (contact.name.includes(nameId)) {\n        alert(`${nameId} is already been`);\n      }\n      return false;\n    });\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filteredName = this.getVisibleContacts();\n\n    return (\n      <>\n        <FormContacts onSubmit={this.addNewContact} repeat={this.repeatContact} />\n        <Filter onFilter={this.changeFilter} value={filter} />\n\n        <ContactsList value={filteredName} onDelete={this.deleteContact} />\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}